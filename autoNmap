#!/usr/bin/php -q
<?php

	require_once 'Console/Table.php';
	require_once 'Console/Color2.php';

	$options = getopt("ht:i:o:a::");
	$color = new Console_Color2();
	$good = 0;
	$argument = "";

	foreach($options as $option=>$value)
	{
		switch($option)
		{
			case "h":
				$help = true;
			case "t":
				$type = $value;
				$good++;
			case "i":
				$input = $value;
				$good++;
			case "o":
				$output = $value;
				$good++;
			case "a":
				$argument = $value;
		}
	}

	art();

	if(isset($help))
        {
                showHelp();
        	exit(1);
	}
	
	if($good!=6)
	{
		print $color->convert("\n%RERROR: Must provide mandatory arguments%n\n\n");
		exit(1);
	}	
	
	if(substr($output, -1)!="/")
	{
		$output = $output."/";
	}

	if(file_exists($input) AND is_readable($input))
	{
		$inputType = 0;
	}
	elseif(checkIP($input))
	{
		$inputType = 1;
	}
	else
	{
		print $color->convert("\n%RERROR: Input file or IP not valid!%n\n\n");
		exit(1);
	}

	if($type=="tcp")
	{
		$scanType = 0;
	}
	elseif($type=="udp")
	{
		$scanType = 1;
	}
	else
	{	
		print $color->convert("\n%RERROR: Scan type not valid!%n\n\n");
		exit(1);
	}

	
	if(!file_exists($output) OR !is_writeable($output))
	{
		print $color->convert("\n%RERROR: Output folder invalid!%n\n\n");
                exit(1);
	}
	
	if($argument!="")
	{
		$argument = " ".$argument;
	}

	if($scanType==0)
	{
		if($inputType==0)
		{
			$cmd = "nmap -sS -PN -p 0-1024 -n -iL ".$input." -oA ".$output."tcp-lo -A -vv".$argument;
			print $color->convert("\n%GRunning TCP-LO...%n\n");
			run($cmd);
			print $color->convert("\n%GTCP-LO Done!!%n\n\n");
			$cmd = "nmap -sS -PN -p 1025-32767 -n -iL ".$input." -oA ".$output."tcp-med -A -vv".$argument;
			print $color->convert("\n%GRunning TCP-MED...%n\n");
			run($cmd);
			print $color->convert("\n%GTCP-MED Done!!%n\n\n");
			$cmd = "nmap -sS -PN -p 32768-65535 -n -iL ".$input." -oA ".$output."tcp-hi -A -vv".$argument;
			print $color->convert("\n%GRunning TCP-HI...%n\n");
			run($cmd);
			print $color->convert("\n%GTCP-HI Done!!%n\n\n");
		}
		else
		{
			$cmd = "nmap -sS -PN -p 0-1024 -n ".$input." -oA ".$output."tcp-lo -A -vv".$argument;
                        print $color->convert("\n%GRunning TCP-LO...%n\n");
                        run($cmd);
                        print $color->convert("\n%GTCP-LO Done!!%n\n\n");
			$cmd = "nmap -sS -PN -p 1025-32767 -n ".$input." -oA ".$output."tcp-med -A -vv".$argument;
                        print $color->convert("\n%GRunning TCP-MED...%n\n");
                        run($cmd);
                        print $color->convert("\n%GTCP-MED Done!!%n\n\n");
			$cmd = "nmap -sS -PN -p 32768-65535 -n ".$input." -oA ".$output."tcp-hi -A -vv".$argument;
                        print $color->convert("\n%GRunning TCP-HI...%n\n");
                        run($cmd);
			print $color->convert("\n%GTCP-HI Done!!%n\n\n");
		}		
	}
	else
	{
                if($inputType==0)
                {
                        $cmd = "nmap -sU -PN -p 0-1024 -n -iL ".$input." -oA ".$output."udp-lo -sV -vv".$argument;
                        print $color->convert("\n%GRunning UDP-LO...%n\n");
                        run($cmd);
			print $color->convert("\n%GUDP-LO Done!!%n\n\n");
                        $cmd = "nmap -sU -PN -p 1025-32767 -n -iL ".$input." -oA ".$output."udp-full -A -vv".$argument;
                        print $color->convert("\n%GRunning UDP-FULL...%n\n");
                        run($cmd);
			print $color->convert("\n%GUDP-FULL Done!!%n\n\n");
                }
                else
                {
                        $cmd = "nmap -sU -PN -p 0-1024 -n ".$input." -oA ".$output."udp-lo -sV -vv".$argument;
                        print $color->convert("\n%GRunning UDP-LO...%n\n");
                        run($cmd);
			print $color->convert("\n%GUDP-LO Done!!%n\n\n");
                        $cmd = "nmap -sU -PN -p 1025-32767 -n ".$input." -oA ".$output."udp-full -vv".$argument;
                        print $color->convert("\n%GRunning UDP-FULL...%n\n");
                        run($cmd);
			print $color->convert("\n%GUDP-FULL Done!!%n\n\n");
                }
  
	}

	function run($command)
	{
		$descriptorspec = array(
			0 => array("pipe","r"),
			1 => array("pipe","w"),
			2 => array("file","./error.log","a")
		);

		$process = proc_open($command, $descriptorspec, $pipes);

		if (is_resource($process)) 
		{
			while ($s = fgets($pipes[1])) 
			{
        			print $s;
        			flush();
    			}
			fclose($pipes[1]);
			proc_close($process);
		}
	}

	function checkIP($addr)
	{
		if(preg_match("/^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/", $addr) OR preg_match("/^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(\d|[1-2]\d|3[0-2]))$/", $addr) OR preg_match("/^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*/", $addr) OR preg_match("/^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*(\/(\d|\d\d|1[0-1]\d|12[0-8]))$/", $addr) OR preg_match("/^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])$/", $addr))
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	function showHelp()
	{
		$tbl = new Console_Table();
		$color = new Console_Color2();
		print $color->convert("%M\nUsage: ./autoNmap -t scantype -i targetlist/ip -o outputfolder\n\n%B");
                $tbl->setHeaders(array("Argument", "Paramater", "Description"));
                $tbl->addRow(array("-h", "-", "Displays this message"));
                $tbl->addRow(array("-t", "tcp / udp", "Scan type (note: udp-full runs without -sV)"));
                $tbl->addRow(array("-i", "targets.txt / ip / hostname", "Target list, ip or hostname (CIDR supported)"));
                $tbl->addRow(array("-o", "nmap/", "Output folder"));
                $tbl->addRow(array("-a", "\"argument1 argument2\"", "Additional arguments passed to nmap"));
                print $tbl->getTable();
		print "\n";
	}	

	function art()
	{
		$color = new Console_Color2();
		print $color->convert("%Y             _        _   _                       
            | |      | \ | |                      
  __ _ _   _| |_ ___ |  \| |_ __ ___   __ _ _ __  
 / _` | | | | __/ _ \| . ` | '_ ` _ \ / _` | '_ \ 
| (_| | |_| | || (_) | |\  | | | | | | (_| | |_) |
 \__,_|\__,_|\__\___/|_| \_|_| |_| |_|\__,_| .__/ 
                                           | |    
                                           |_|    
		      v0.1
	   %CWritten by Adam McKissock
%n");
	}
?>

